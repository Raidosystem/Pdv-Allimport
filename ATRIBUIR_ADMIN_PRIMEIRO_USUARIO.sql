-- =========================================================
-- üîß ATRIBUIR AUTOMATICAMENTE FUN√á√ÉO ADMINISTRADOR
-- AO PRIMEIRO USU√ÅRIO DE CADA EMPRESA
-- =========================================================

-- Este script cria:
-- 1. Trigger que detecta primeiro usu√°rio da empresa
-- 2. Fun√ß√£o que atribui automaticamente a fun√ß√£o "Administrador"
-- 3. Atualiza usu√°rios existentes que ainda n√£o t√™m fun√ß√£o

-- =========================================================
-- 1. FUN√á√ÉO PARA ATRIBUIR ADMIN AO PRIMEIRO USU√ÅRIO
-- =========================================================

CREATE OR REPLACE FUNCTION atribuir_admin_primeiro_usuario()
RETURNS TRIGGER AS $$
DECLARE
  v_funcao_admin_id UUID;
  v_count_funcionarios INTEGER;
BEGIN
  -- Contar quantos funcion√°rios j√° existem para esta empresa
  SELECT COUNT(*) INTO v_count_funcionarios
  FROM funcionarios
  WHERE empresa_id = NEW.empresa_id
  AND id != NEW.id; -- Excluir o pr√≥prio usu√°rio sendo inserido

  RAISE NOTICE 'üîç Verificando primeiro usu√°rio - Total de funcion√°rios existentes: %', v_count_funcionarios;

  -- Se for o primeiro usu√°rio da empresa (count = 0)
  IF v_count_funcionarios = 0 THEN
    RAISE NOTICE '‚úÖ Primeiro usu√°rio detectado! Atribuindo fun√ß√£o Administrador...';

    -- Buscar ID da fun√ß√£o Administrador desta empresa
    SELECT id INTO v_funcao_admin_id
    FROM funcoes
    WHERE empresa_id = NEW.empresa_id
    AND nome = 'Administrador'
    LIMIT 1;

    IF v_funcao_admin_id IS NULL THEN
      RAISE WARNING '‚ö†Ô∏è Fun√ß√£o Administrador n√£o encontrada para empresa %. Ser√° criada.', NEW.empresa_id;
      
      -- Se n√£o existir, criar a fun√ß√£o Administrador
      INSERT INTO funcoes (empresa_id, nome, descricao)
      VALUES (NEW.empresa_id, 'Administrador', 'Acesso total ao sistema')
      RETURNING id INTO v_funcao_admin_id;
      
      RAISE NOTICE '‚úÖ Fun√ß√£o Administrador criada: %', v_funcao_admin_id;
    END IF;

    -- Atribuir a fun√ß√£o ao funcion√°rio
    NEW.funcao_id := v_funcao_admin_id;
    NEW.tipo_admin := 'admin_empresa'; -- Tamb√©m marcar como admin no tipo_admin

    RAISE NOTICE '‚úÖ Fun√ß√£o Administrador atribu√≠da ao usu√°rio % (funcao_id: %)', NEW.id, v_funcao_admin_id;
  ELSE
    RAISE NOTICE '‚ÑπÔ∏è N√£o √© o primeiro usu√°rio (j√° existem % funcion√°rios)', v_count_funcionarios;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =========================================================
-- 2. CRIAR TRIGGER BEFORE INSERT EM funcionarios
-- =========================================================

-- Remover trigger se j√° existir
DROP TRIGGER IF EXISTS trigger_atribuir_admin_primeiro_usuario ON funcionarios;

-- Criar trigger
CREATE TRIGGER trigger_atribuir_admin_primeiro_usuario
BEFORE INSERT ON funcionarios
FOR EACH ROW
EXECUTE FUNCTION atribuir_admin_primeiro_usuario();

-- =========================================================
-- 3. CORRIGIR USU√ÅRIOS EXISTENTES SEM FUN√á√ÉO
-- =========================================================

-- Identificar funcion√°rios sem funcao_id que deveriam ser admin
WITH primeiros_usuarios AS (
  SELECT DISTINCT ON (empresa_id)
    id,
    empresa_id,
    nome,
    email,
    created_at
  FROM funcionarios
  WHERE funcao_id IS NULL
  ORDER BY empresa_id, created_at ASC
)
SELECT 
  'üîç USU√ÅRIOS SEM FUN√á√ÉO (PRIMEIRO DE CADA EMPRESA)' as info,
  pu.id as funcionario_id,
  pu.nome,
  pu.email,
  pu.empresa_id,
  e.nome as empresa_nome,
  pu.created_at
FROM primeiros_usuarios pu
LEFT JOIN empresas e ON e.id = pu.empresa_id
ORDER BY pu.created_at;

-- =========================================================
-- 4. ATRIBUIR FUN√á√ÉO ADMIN PARA PRIMEIROS USU√ÅRIOS
-- =========================================================

DO $$
DECLARE
  v_funcionario RECORD;
  v_funcao_admin_id UUID;
  v_count_atribuidos INTEGER := 0;
BEGIN
  -- Para cada primeiro funcion√°rio sem fun√ß√£o
  FOR v_funcionario IN (
    SELECT DISTINCT ON (empresa_id)
      id,
      empresa_id,
      nome
    FROM funcionarios
    WHERE funcao_id IS NULL
    ORDER BY empresa_id, created_at ASC
  )
  LOOP
    -- Buscar fun√ß√£o Administrador da empresa
    SELECT id INTO v_funcao_admin_id
    FROM funcoes
    WHERE empresa_id = v_funcionario.empresa_id
    AND nome = 'Administrador'
    LIMIT 1;

    IF v_funcao_admin_id IS NULL THEN
      RAISE NOTICE '‚ö†Ô∏è Criando fun√ß√£o Administrador para empresa %', v_funcionario.empresa_id;
      
      -- Criar fun√ß√£o se n√£o existir
      INSERT INTO funcoes (empresa_id, nome, descricao)
      VALUES (v_funcionario.empresa_id, 'Administrador', 'Acesso total ao sistema')
      RETURNING id INTO v_funcao_admin_id;
    END IF;

    -- Atribuir fun√ß√£o ao funcion√°rio
    UPDATE funcionarios
    SET 
      funcao_id = v_funcao_admin_id,
      tipo_admin = 'admin_empresa'
    WHERE id = v_funcionario.id;

    v_count_atribuidos := v_count_atribuidos + 1;
    RAISE NOTICE '‚úÖ Fun√ß√£o Administrador atribu√≠da a: % (empresa: %)', v_funcionario.nome, v_funcionario.empresa_id;
  END LOOP;

  RAISE NOTICE 'üéâ Total de usu√°rios corrigidos: %', v_count_atribuidos;
END $$;

-- =========================================================
-- 5. VERIFICA√á√ÉO FINAL
-- =========================================================

-- Verificar se trigger foi criado
SELECT 
  '‚úÖ TRIGGER CRIADO' as status,
  trigger_name,
  event_manipulation,
  event_object_table,
  action_timing
FROM information_schema.triggers
WHERE trigger_name = 'trigger_atribuir_admin_primeiro_usuario';

-- Verificar funcion√°rios com suas fun√ß√µes
SELECT 
  'üë• FUNCION√ÅRIOS E SUAS FUN√á√ïES' as info,
  f.id,
  f.nome,
  f.email,
  f.empresa_id,
  f.funcao_id,
  f.tipo_admin,
  func.nome as nome_funcao,
  e.nome as empresa_nome,
  f.created_at
FROM funcionarios f
LEFT JOIN funcoes func ON func.id = f.funcao_id
LEFT JOIN empresas e ON e.id = f.empresa_id
ORDER BY f.empresa_id, f.created_at;

-- Contar funcion√°rios por empresa e suas fun√ß√µes
SELECT 
  'üìä RESUMO POR EMPRESA' as info,
  e.nome as empresa_nome,
  COUNT(f.id) as total_funcionarios,
  COUNT(f.funcao_id) as com_funcao,
  COUNT(CASE WHEN func.nome = 'Administrador' THEN 1 END) as administradores
FROM empresas e
LEFT JOIN funcionarios f ON f.empresa_id = e.id
LEFT JOIN funcoes func ON func.id = f.funcao_id
GROUP BY e.id, e.nome
ORDER BY e.nome;

-- =========================================================
-- ‚úÖ RESULTADO ESPERADO
-- =========================================================
-- 1. Trigger criado: trigger_atribuir_admin_primeiro_usuario
-- 2. Fun√ß√£o criada: atribuir_admin_primeiro_usuario()
-- 3. Primeiros usu√°rios existentes corrigidos com fun√ß√£o Admin
-- 4. Novos usu√°rios ser√£o automaticamente Admin se forem primeiro da empresa
-- =========================================================

DO $$
BEGIN
  RAISE NOTICE '
üéâ SISTEMA DE ATRIBUI√á√ÉO AUTOM√ÅTICA DE ADMIN CONFIGURADO!

üìã O que foi implementado:
- ‚úÖ Trigger que detecta primeiro usu√°rio de cada empresa
- ‚úÖ Atribui√ß√£o autom√°tica da fun√ß√£o "Administrador"
- ‚úÖ Corre√ß√£o de usu√°rios existentes sem fun√ß√£o
- ‚úÖ Tipo_admin tamb√©m definido como "admin_empresa"

üîÑ Como funciona agora:
1. Novo usu√°rio se registra
2. Sistema detecta se √© o primeiro da empresa
3. Se for, busca fun√ß√£o "Administrador" (ou cria se n√£o existir)
4. Atribui automaticamente funcao_id e tipo_admin
5. Usu√°rio j√° loga com acesso de Administrador

‚ö†Ô∏è IMPORTANTE:
- Execute este script no Supabase SQL Editor
- Verifique os resultados nas consultas acima
- Teste criando uma nova conta
';
END $$;
