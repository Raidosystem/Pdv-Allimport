-- üîß SOLU√á√ÉO DEFINITIVA: RLS login_funcionarios

-- O PROBLEMA:
-- A pol√≠tica de INSERT usa get_funcionario_empresa_id(auth.uid())
-- Mas no frontend, auth.uid() retorna empresa_id diretamente
-- Ent√£o a verifica√ß√£o fica: f.empresa_id = get_funcionario_empresa_id(f1726fcf...)
-- E get_funcionario_empresa_id busca:
--   1. Na tabela empresas WHERE id = auth.uid() ‚úÖ 
--   2. OU na tabela funcionarios WHERE user_id = auth.uid() ‚ùå (user_id pode ser NULL)

-- SOLU√á√ÉO: Permitir INSERT se o funcionario_id pertence √† mesma empresa do admin

-- ‚úÖ 1. Ver fun√ß√£o atual
SELECT 
  'üìã FUN√á√ÉO ATUAL' as status,
  routine_name,
  routine_definition
FROM information_schema.routines
WHERE routine_name = 'get_funcionario_empresa_id';

-- ‚úÖ 2. REMOVER pol√≠ticas antigas
DROP POLICY IF EXISTS "login_funcionarios_insert_policy" ON login_funcionarios;
DROP POLICY IF EXISTS "login_funcionarios_select_policy" ON login_funcionarios;
DROP POLICY IF EXISTS "login_funcionarios_update_policy" ON login_funcionarios;
DROP POLICY IF EXISTS "login_funcionarios_delete_policy" ON login_funcionarios;

-- ‚úÖ 3. CRIAR POL√çTICAS SIMPLES E DIRETAS

-- SELECT: Ver logins de funcion√°rios da minha empresa
CREATE POLICY "login_funcionarios_select_policy"
ON login_funcionarios
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = login_funcionarios.funcionario_id
    AND (
      -- Op√ß√£o 1: Empresa diretamente (quando auth.uid() = empresa_id)
      f.empresa_id = auth.uid()
      OR
      -- Op√ß√£o 2: Via get_funcionario_empresa_id (quando auth.uid() = user_id de funcionario)
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  )
);

-- INSERT: Criar login para funcion√°rios da minha empresa
CREATE POLICY "login_funcionarios_insert_policy"
ON login_funcionarios
FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = login_funcionarios.funcionario_id
    AND (
      -- Op√ß√£o 1: Empresa diretamente (quando auth.uid() = empresa_id)
      f.empresa_id = auth.uid()
      OR
      -- Op√ß√£o 2: Via get_funcionario_empresa_id (quando auth.uid() = user_id de funcionario)
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  )
);

-- UPDATE: Atualizar logins de funcion√°rios da minha empresa
CREATE POLICY "login_funcionarios_update_policy"
ON login_funcionarios
FOR UPDATE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = login_funcionarios.funcionario_id
    AND (
      f.empresa_id = auth.uid()
      OR
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = login_funcionarios.funcionario_id
    AND (
      f.empresa_id = auth.uid()
      OR
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  )
);

-- DELETE: Deletar logins de funcion√°rios da minha empresa
CREATE POLICY "login_funcionarios_delete_policy"
ON login_funcionarios
FOR DELETE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = login_funcionarios.funcionario_id
    AND (
      f.empresa_id = auth.uid()
      OR
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  )
);

-- ‚úÖ 4. Verificar pol√≠ticas criadas
SELECT 
  '‚úÖ POL√çTICAS CRIADAS' as status,
  policyname,
  cmd as acao
FROM pg_policies
WHERE tablename = 'login_funcionarios'
ORDER BY cmd;

-- üß™ 5. TESTAR com os IDs reais

-- Teste 1: Verificar auth.uid()
SELECT 
  'üîç TESTE 1: auth.uid()' as teste,
  auth.uid() as meu_auth_uid;

-- Teste 2: Verificar se get_funcionario_empresa_id retorna empresa_id
SELECT 
  'üîç TESTE 2: get_funcionario_empresa_id()' as teste,
  get_funcionario_empresa_id(auth.uid()) as empresa_id_via_funcao;

-- Teste 3: Verificar se Maria Silva tem empresa_id correto
SELECT 
  'üîç TESTE 3: Maria Silva' as teste,
  f.id,
  f.nome,
  f.empresa_id,
  auth.uid() as meu_auth_uid,
  CASE 
    WHEN f.empresa_id = auth.uid() THEN '‚úÖ MATCH DIRETO'
    WHEN f.empresa_id = get_funcionario_empresa_id(auth.uid()) THEN '‚úÖ MATCH VIA FUN√á√ÉO'
    ELSE '‚ùå SEM MATCH'
  END as resultado
FROM funcionarios f
WHERE f.id = '96c36a45-3cf3-4e76-b291-c3a5475e02aa';

-- Teste 4: Simular a pol√≠tica EXISTS do INSERT
SELECT 
  'üîç TESTE 4: Pol√≠tica INSERT' as teste,
  EXISTS (
    SELECT 1 FROM funcionarios f
    WHERE f.id = '96c36a45-3cf3-4e76-b291-c3a5475e02aa'
    AND (
      f.empresa_id = auth.uid()
      OR
      f.empresa_id = get_funcionario_empresa_id(auth.uid())
    )
  ) as politica_permite_insert;

-- üìä Resumo final
SELECT 
  'üìä DIAGN√ìSTICO FINAL' as status,
  CASE 
    WHEN auth.uid() = 'f1726fcf-d23b-4cca-8079-39314ae56e00' 
    THEN '‚úÖ auth.uid() √© empresa_id - usar f.empresa_id = auth.uid()'
    ELSE '‚ö†Ô∏è auth.uid() n√£o √© empresa_id - usar get_funcionario_empresa_id()'
  END as conclusao;
