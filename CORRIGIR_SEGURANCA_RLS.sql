-- ========================================
-- üö® CORRE√á√ÉO CR√çTICA DE SEGURAN√áA - PDV ALLIMPORT
-- ‚ö° REABILITAR ROW LEVEL SECURITY (RLS)
-- ========================================
-- PROBLEMA: O arquivo DISABLE_RLS_SIMPLES.sql desabilitou a seguran√ßa,
-- causando vazamento de dados entre usu√°rios/empresas.
-- 
-- SOLU√á√ÉO: Reabilitar RLS e criar pol√≠ticas b√°sicas de seguran√ßa
-- ========================================

-- 1. REABILITAR RLS EM TODAS AS TABELAS CR√çTICAS
ALTER TABLE IF EXISTS produtos ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS clientes ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS categorias ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS vendas ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS itens_venda ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS caixa ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS movimentacoes_caixa ENABLE ROW LEVEL SECURITY;

-- 2. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA PRODUTOS
DROP POLICY IF EXISTS "produtos_user_policy" ON produtos;
CREATE POLICY "produtos_user_policy" ON produtos
    FOR ALL
    USING (auth.uid() = user_id::uuid OR user_id IS NULL);

-- 3. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA CLIENTES
DROP POLICY IF EXISTS "clientes_user_policy" ON clientes;
CREATE POLICY "clientes_user_policy" ON clientes
    FOR ALL
    USING (auth.uid() = user_id::uuid OR user_id IS NULL);

-- 4. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA VENDAS
DROP POLICY IF EXISTS "vendas_user_policy" ON vendas;
CREATE POLICY "vendas_user_policy" ON vendas
    FOR ALL
    USING (auth.uid() = user_id::uuid OR user_id IS NULL);

-- 5. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA ITENS_VENDA
DROP POLICY IF EXISTS "itens_venda_user_policy" ON itens_venda;
CREATE POLICY "itens_venda_user_policy" ON itens_venda
    FOR ALL
    USING (auth.uid() = user_id::uuid OR user_id IS NULL);

-- 6. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA CAIXA
DROP POLICY IF EXISTS "caixa_user_policy" ON caixa;
CREATE POLICY "caixa_user_policy" ON caixa
    FOR ALL
    USING (auth.uid() = usuario_id::uuid OR usuario_id IS NULL);

-- 7. CRIAR POL√çTICAS B√ÅSICAS DE SEGURAN√áA PARA MOVIMENTACOES_CAIXA
DROP POLICY IF EXISTS "movimentacoes_caixa_user_policy" ON movimentacoes_caixa;
CREATE POLICY "movimentacoes_caixa_user_policy" ON movimentacoes_caixa
    FOR ALL
    USING (auth.uid() = usuario_id::uuid OR usuario_id IS NULL);

-- 8. POL√çTICAS PARA CATEGORIAS (P√öBLICAS PARA TODOS OS USU√ÅRIOS LOGADOS)
DROP POLICY IF EXISTS "categorias_authenticated_policy" ON categorias;
CREATE POLICY "categorias_authenticated_policy" ON categorias
    FOR ALL
    USING (auth.role() = 'authenticated');

-- 9. VERIFICAR STATUS FINAL DO RLS
SELECT 
    'üîç STATUS RLS FINAL' as info,
    schemaname,
    tablename,
    CASE WHEN rowsecurity THEN '‚úÖ ATIVO' ELSE '‚ùå INATIVO' END as status
FROM pg_tables 
WHERE tablename IN ('produtos', 'clientes', 'categorias', 'vendas', 'itens_venda', 'caixa', 'movimentacoes_caixa')
AND schemaname = 'public'
ORDER BY tablename;

-- 10. VERIFICAR POL√çTICAS CRIADAS
SELECT 
    'üîë POL√çTICAS CRIADAS' as info,
    tablename,
    policyname,
    cmd as operacao
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('produtos', 'clientes', 'categorias', 'vendas', 'itens_venda', 'caixa', 'movimentacoes_caixa')
ORDER BY tablename, policyname;

-- 11. TESTE DE ISOLAMENTO (deve retornar apenas dados do usu√°rio logado)
SELECT 
    'üß™ TESTE ISOLAMENTO' as info,
    'Produtos vis√≠veis ap√≥s RLS' as descricao,
    COUNT(*) as quantidade
FROM produtos;

SELECT 
    'üß™ TESTE ISOLAMENTO' as info,
    'Clientes vis√≠veis ap√≥s RLS' as descricao,
    COUNT(*) as quantidade
FROM clientes;

-- 12. INFORMA√á√ïES DO USU√ÅRIO ATUAL
SELECT 
    'üë§ USU√ÅRIO ATUAL' as info,
    auth.uid() as user_id,
    auth.email() as email,
    auth.role() as role;

SELECT '‚úÖ CORRE√á√ÉO DE SEGURAN√áA APLICADA COM SUCESSO' as resultado;
SELECT '‚ö†Ô∏è IMPORTANTE: Verifique se os dados agora est√£o isolados por usu√°rio' as aviso;