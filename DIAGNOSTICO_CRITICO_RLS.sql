-- ========================================
-- üö® DIAGN√ìSTICO CR√çTICO - POR QUE RLS N√ÉO FUNCIONA
-- O RLS ainda n√£o est√° isolando os dados
-- ========================================

-- 1. VERIFICAR SE VOC√ä EST√Å EXECUTANDO COMO ADMINISTRADOR
SELECT 
    'üîç CONTEXTO DE EXECU√á√ÉO' as info,
    current_user as database_user,
    session_user as session_user,
    current_setting('is_superuser') as is_superuser,
    current_setting('session_authorization') as session_auth,
    CASE 
        WHEN current_user = 'postgres' THEN '‚ùå CR√çTICO: EXECUTANDO COMO POSTGRES (BYPASS TOTAL)'
        WHEN current_user LIKE '%service_role%' THEN '‚ùå CR√çTICO: EXECUTANDO COMO SERVICE ROLE (BYPASS TOTAL)'
        WHEN current_setting('is_superuser') = 'on' THEN '‚ùå CR√çTICO: SUPERUSER (BYPASS TOTAL)'
        ELSE '‚úÖ USU√ÅRIO NORMAL'
    END as status;

-- 2. VERIFICAR AUTENTICA√á√ÉO SUPABASE
SELECT 
    'üë§ AUTENTICA√á√ÉO SUPABASE' as info,
    auth.uid() as user_id,
    auth.email() as email,
    auth.role() as role,
    CASE 
        WHEN auth.uid() IS NULL THEN '‚ùå CR√çTICO: SEM AUTENTICA√á√ÉO SUPABASE'
        ELSE '‚úÖ AUTENTICADO'
    END as auth_status;

-- 3. VERIFICAR SE RLS EST√Å REALMENTE ATIVO
SELECT 
    'üîí STATUS RLS POR TABELA' as info,
    tablename,
    CASE WHEN rowsecurity THEN '‚úÖ ATIVO' ELSE '‚ùå INATIVO' END as rls_status,
    (SELECT COUNT(*) FROM pg_policies WHERE pg_policies.tablename = pg_tables.tablename AND schemaname = 'public') as total_policies
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename IN ('produtos', 'clientes', 'vendas', 'vendas_itens', 'caixa', 'movimentacoes_caixa', 'ordens_servico')
ORDER BY tablename;

-- 4. VERIFICAR POL√çTICAS ESPEC√çFICAS
SELECT 
    'üîë POL√çTICAS ATIVAS' as info,
    tablename,
    policyname,
    cmd as operacao,
    qual as condicao,
    CASE 
        WHEN qual LIKE '%auth.uid()%' THEN '‚úÖ USA auth.uid()'
        ELSE '‚ùå N√ÉO USA auth.uid()'
    END as usa_auth_uid
FROM pg_policies 
WHERE schemaname = 'public'
  AND tablename IN ('produtos', 'clientes', 'vendas', 'vendas_itens', 'caixa', 'movimentacoes_caixa', 'ordens_servico')
ORDER BY tablename, policyname;

-- 5. TESTE DIRETO DE CONDI√á√ÉO auth.uid()
SELECT 
    'üß™ TESTE auth.uid()' as info,
    auth.uid() as valor_auth_uid,
    CASE 
        WHEN auth.uid() IS NULL THEN '‚ùå auth.uid() √â NULL'
        ELSE '‚úÖ auth.uid() TEM VALOR'
    END as status;

-- 6. VERIFICAR SE H√Å REGISTROS COM user_id IGUAL AO SEU
SELECT 
    'üìä PRODUTOS DO SEU USER_ID' as info,
    COUNT(*) as quantidade,
    CASE 
        WHEN COUNT(*) = 0 THEN '‚ùå NENHUM PRODUTO SEU'
        ELSE '‚úÖ TEM PRODUTOS SEUS'
    END as status
FROM produtos 
WHERE user_id = auth.uid();

-- 7. COMPARAR user_id DOS REGISTROS COM SEU auth.uid()
SELECT 
    'üîç AN√ÅLISE DE OWNERSHIP' as info,
    'Seu auth.uid()' as tipo,
    auth.uid()::text as valor
    
UNION ALL

SELECT 
    'üîç AN√ÅLISE DE OWNERSHIP' as info,
    'user_id dos produtos' as tipo,
    STRING_AGG(DISTINCT user_id::text, ', ') as valor
FROM produtos 
LIMIT 10;

-- 8. TESTE EXTREMO - VERIFICAR SE A POL√çTICA FUNCIONA MANUALMENTE
SELECT 
    'üß™ TESTE MANUAL DE POL√çTICA' as info,
    COUNT(*) as total_produtos,
    COUNT(CASE WHEN user_id = auth.uid() THEN 1 END) as produtos_meus,
    COUNT(CASE WHEN user_id != auth.uid() OR user_id IS NULL THEN 1 END) as produtos_outros
FROM produtos;

-- 9. VERIFICAR SE EXISTE ALGUM ROLE/PERMISSION ESPECIAL
SELECT 
    'üîì PERMISS√ïES ESPECIAIS' as info,
    has_table_privilege(current_user, 'produtos', 'SELECT') as pode_select,
    pg_has_role(current_user, 'rds_superuser', 'MEMBER') as is_rds_superuser;

-- 10. VERIFICAR CONFIGURA√á√ïES DE SEGURAN√áA
SHOW row_security;

SELECT 'üö® DIAGN√ìSTICO CR√çTICO COMPLETO!' as resultado;