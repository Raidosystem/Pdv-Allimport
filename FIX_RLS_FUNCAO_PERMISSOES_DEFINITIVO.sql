-- üîí CORRIGIR RLS funcao_permissoes - VERS√ÉO DEFINITIVA

-- ‚ö†Ô∏è PROBLEMA:
-- As pol√≠ticas verificam funcionarios.empresa_id mas o user logado
-- usa empresas.id diretamente, ent√£o n√£o encontra match

-- ====================================
-- 1. REMOVER TODAS AS POL√çTICAS ANTIGAS
-- ====================================
DROP POLICY IF EXISTS "rls_funcao_permissoes_select" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_insert" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_update" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_delete" ON funcao_permissoes;

-- ====================================
-- 2. CRIAR POL√çTICAS CORRETAS
-- ====================================

-- SELECT: Ver permiss√µes da sua empresa
CREATE POLICY "funcao_permissoes_select_policy" ON funcao_permissoes
FOR SELECT
TO authenticated
USING (
  -- Permite se empresa_id √© do usu√°rio logado OU se √© funcion√°rio dessa empresa
  empresa_id = auth.uid()
  OR
  empresa_id IN (
    SELECT empresa_id FROM funcionarios WHERE id = auth.uid()
  )
);

-- INSERT: Inserir permiss√µes (admin da empresa)
CREATE POLICY "funcao_permissoes_insert_policy" ON funcao_permissoes
FOR INSERT
TO authenticated
WITH CHECK (
  -- Permite se:
  -- 1. empresa_id √© o pr√≥prio auth.uid() (empresas.id)
  -- 2. OU √© funcion√°rio admin dessa empresa
  empresa_id = auth.uid()
  OR
  EXISTS (
    SELECT 1 FROM funcionarios 
    WHERE id = auth.uid() 
    AND empresa_id = funcao_permissoes.empresa_id
    AND tipo_admin = 'admin_empresa'
  )
);

-- UPDATE: Atualizar permiss√µes
CREATE POLICY "funcao_permissoes_update_policy" ON funcao_permissoes
FOR UPDATE
TO authenticated
USING (
  empresa_id = auth.uid()
  OR
  EXISTS (
    SELECT 1 FROM funcionarios 
    WHERE id = auth.uid() 
    AND empresa_id = funcao_permissoes.empresa_id
    AND tipo_admin = 'admin_empresa'
  )
)
WITH CHECK (
  empresa_id = auth.uid()
  OR
  EXISTS (
    SELECT 1 FROM funcionarios 
    WHERE id = auth.uid() 
    AND empresa_id = funcao_permissoes.empresa_id
    AND tipo_admin = 'admin_empresa'
  )
);

-- DELETE: Deletar permiss√µes
CREATE POLICY "funcao_permissoes_delete_policy" ON funcao_permissoes
FOR DELETE
TO authenticated
USING (
  empresa_id = auth.uid()
  OR
  EXISTS (
    SELECT 1 FROM funcionarios 
    WHERE id = auth.uid() 
    AND empresa_id = funcao_permissoes.empresa_id
    AND tipo_admin = 'admin_empresa'
  )
);

-- ====================================
-- 3. VERIFICAR RESULTADO
-- ====================================
SELECT 
  '‚úÖ POL√çTICAS RLS ATUALIZADAS' as status,
  policyname,
  cmd as operacao
FROM pg_policies
WHERE tablename = 'funcao_permissoes'
ORDER BY cmd, policyname;

-- ====================================
-- 4. TESTE COM SEU USER_ID
-- ====================================

-- Teste se consegue ver permiss√µes (deve retornar dados)
SELECT 
  'üß™ TESTE SELECT' as teste,
  COUNT(*) as total_permissoes_visiveis
FROM funcao_permissoes
WHERE empresa_id = 'f1726fcf-d23b-4cca-8079-39314ae56e00';

-- Ver estrutura
SELECT 
  'üìã ESTRUTURA' as info,
  'Agora empresa_id = auth.uid() funciona corretamente' as explicacao;
