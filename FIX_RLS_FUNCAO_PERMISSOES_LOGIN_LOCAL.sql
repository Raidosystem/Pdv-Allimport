-- üîí CORRIGIR RLS FUNCAO_PERMISSOES - COMPAT√çVEL COM LOGIN LOCAL

-- ‚ö†Ô∏è PROBLEMA:
-- Sistema usa login local (2 n√≠veis) onde auth.uid() retorna NULL
-- RLS de funcao_permissoes bloqueia INSERT porque verifica auth.uid()
-- Precisa permitir INSERT quando empresa_id est√° correto

-- ====================================
-- 1. VER POL√çTICAS ATUAIS
-- ====================================
SELECT 
  'üìã POL√çTICAS ATUAIS' as titulo,
  policyname,
  cmd as operacao
FROM pg_policies
WHERE tablename = 'funcao_permissoes'
ORDER BY cmd, policyname;

-- ====================================
-- 2. REMOVER POL√çTICAS ANTIGAS
-- ====================================
DROP POLICY IF EXISTS "rls_funcao_permissoes_select" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_insert" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_update" ON funcao_permissoes;
DROP POLICY IF EXISTS "rls_funcao_permissoes_delete" ON funcao_permissoes;
DROP POLICY IF EXISTS "funcao_permissoes_select" ON funcao_permissoes;
DROP POLICY IF EXISTS "funcao_permissoes_insert" ON funcao_permissoes;
DROP POLICY IF EXISTS "funcao_permissoes_update" ON funcao_permissoes;
DROP POLICY IF EXISTS "funcao_permissoes_delete" ON funcao_permissoes;

-- ====================================
-- 3. CRIAR POL√çTICAS PERMISSIVAS
-- ====================================

-- ‚úÖ SELECT: Qualquer usu√°rio autenticado pode ver permiss√µes
-- Necess√°rio para o sistema de permiss√µes funcionar
CREATE POLICY "funcao_permissoes_select_all" ON funcao_permissoes
FOR SELECT
TO authenticated
USING (true);

-- ‚úÖ INSERT: Permitir INSERT com empresa_id v√°lido
-- Como o sistema usa login local, n√£o podemos verificar auth.uid()
-- Em vez disso, verificamos se a empresa_id existe na tabela empresas
CREATE POLICY "funcao_permissoes_insert_valid" ON funcao_permissoes
FOR INSERT
TO authenticated
WITH CHECK (
  -- Verifica se empresa_id existe
  EXISTS (
    SELECT 1 FROM empresas WHERE id = funcao_permissoes.empresa_id
  )
);

-- ‚úÖ UPDATE: Permitir UPDATE com empresa_id v√°lido
CREATE POLICY "funcao_permissoes_update_valid" ON funcao_permissoes
FOR UPDATE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM empresas WHERE id = funcao_permissoes.empresa_id
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 FROM empresas WHERE id = funcao_permissoes.empresa_id
  )
);

-- ‚úÖ DELETE: Permitir DELETE com empresa_id v√°lido
CREATE POLICY "funcao_permissoes_delete_valid" ON funcao_permissoes
FOR DELETE
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM empresas WHERE id = funcao_permissoes.empresa_id
  )
);

-- ====================================
-- 4. VERIFICAR RESULTADO
-- ====================================
SELECT 
  '‚úÖ POL√çTICAS CRIADAS' as status,
  policyname,
  cmd as operacao,
  CASE 
    WHEN policyname LIKE '%select%' THEN 'üîì Leitura liberada'
    WHEN policyname LIKE '%insert%' THEN '‚úèÔ∏è INSERT com empresa_id v√°lido'
    WHEN policyname LIKE '%update%' THEN 'üîß UPDATE com empresa_id v√°lido'
    WHEN policyname LIKE '%delete%' THEN 'üóëÔ∏è DELETE com empresa_id v√°lido'
    ELSE '‚ùì'
  END as descricao
FROM pg_policies
WHERE tablename = 'funcao_permissoes'
ORDER BY cmd, policyname;

-- ====================================
-- 5. TESTAR PERMISS√ïES
-- ====================================
-- Verificar se consegue ver permiss√µes
SELECT 
  'üß™ TESTE SELECT' as teste,
  COUNT(*) as total_permissoes
FROM funcao_permissoes;

-- Verificar empresa_id v√°lido
SELECT 
  'üß™ EMPRESAS V√ÅLIDAS' as teste,
  id,
  nome,
  email
FROM empresas
WHERE id = 'f1726fcf-d23b-4cca-8079-39314ae56e00';

-- ====================================
-- 6. RESUMO DA SOLU√á√ÉO
-- ====================================
SELECT 
  'üìù RESUMO' as info,
  '‚úÖ RLS compat√≠vel com login local (2 n√≠veis)' as solucao_1,
  'üîì Verifica empresa_id EXISTS ao inv√©s de auth.uid()' as solucao_2,
  'üöÄ INSERT/UPDATE/DELETE funcionam com sess√£o local' as resultado;
