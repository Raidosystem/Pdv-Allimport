-- ============================================
-- VERIFICAR USU√ÅRIOS QUE N√ÉO APARECEM NO ADMIN
-- ============================================

-- 1. Listar TODOS os usu√°rios do auth.users
SELECT 
    'üîç TODOS OS USU√ÅRIOS (auth.users)' as categoria,
    au.id as user_id,
    au.email,
    au.created_at as cadastro,
    au.email_confirmed_at as email_confirmado,
    au.last_sign_in_at as ultimo_login,
    CASE 
        WHEN au.deleted_at IS NOT NULL THEN '‚ùå DELETADO'
        WHEN au.email_confirmed_at IS NULL THEN '‚ö†Ô∏è EMAIL N√ÉO CONFIRMADO'
        ELSE '‚úÖ ATIVO'
    END as status_auth
FROM auth.users au
ORDER BY au.created_at DESC;

-- 2. Verificar quais t√™m subscription
SELECT 
    'üìä USU√ÅRIOS COM SUBSCRIPTION' as categoria,
    s.user_id,
    au.email,
    s.status,
    s.trial_end_date,
    s.subscription_end_date,
    s.created_at
FROM public.subscriptions s
INNER JOIN auth.users au ON au.id = s.user_id
ORDER BY s.created_at DESC;

-- 3. Verificar quais est√£o no user_approvals
SELECT 
    '‚úÖ USU√ÅRIOS NO USER_APPROVALS' as categoria,
    ua.user_id,
    ua.email,
    ua.full_name,
    ua.company_name,
    ua.status as approval_status,
    ua.created_at
FROM public.user_approvals ua
ORDER BY ua.created_at DESC;

-- 4. USU√ÅRIOS SEM SUBSCRIPTION (por isso n√£o aparecem no admin!)
SELECT 
    '‚ùå USU√ÅRIOS SEM SUBSCRIPTION (N√ÉO APARECEM NO ADMIN)' as problema,
    au.id as user_id,
    au.email,
    au.created_at as cadastro,
    au.last_sign_in_at as ultimo_login,
    'Precisa criar subscription' as solucao
FROM auth.users au
LEFT JOIN public.subscriptions s ON s.user_id = au.id
WHERE s.id IS NULL
ORDER BY au.created_at DESC;

-- 5. CRIAR SUBSCRIPTIONS PARA USU√ÅRIOS QUE N√ÉO T√äM
-- Execute este bloco para criar subscriptions autom√°ticas
DO $$ 
DECLARE
    user_record RECORD;
BEGIN
    FOR user_record IN 
        SELECT au.id, au.email 
        FROM auth.users au
        LEFT JOIN public.subscriptions s ON s.user_id = au.id
        WHERE s.id IS NULL 
        AND au.deleted_at IS NULL
    LOOP
        INSERT INTO public.subscriptions (
            user_id,
            email,
            status,
            trial_start_date,
            trial_end_date,
            created_at,
            updated_at
        ) VALUES (
            user_record.id,
            user_record.email,
            'expired', -- Inicia como expirado, admin pode adicionar dias
            NOW(),
            NOW(), -- J√° expirado
            NOW(),
            NOW()
        );
        
        RAISE NOTICE '‚úÖ Subscription criada para: %', user_record.email;
    END LOOP;
    
    RAISE NOTICE 'üéâ Subscriptions criadas para todos os usu√°rios!';
END $$;

-- 6. Verificar novamente ap√≥s cria√ß√£o
SELECT 
    'üéâ RESULTADO FINAL - TODOS DEVEM APARECER AGORA' as resultado,
    au.id as user_id,
    au.email,
    s.status as subscription_status,
    CASE 
        WHEN s.trial_end_date > NOW() THEN 'üéÅ TRIAL ATIVO'
        WHEN s.subscription_end_date > NOW() THEN '‚≠ê PREMIUM ATIVO'
        ELSE '‚ùå EXPIRADO (Admin pode adicionar dias)'
    END as situacao
FROM auth.users au
INNER JOIN public.subscriptions s ON s.user_id = au.id
WHERE au.deleted_at IS NULL
ORDER BY au.created_at DESC;
