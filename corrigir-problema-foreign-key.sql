-- üîß CORRIGIR PROBLEMA DE FOREIGN KEY - USAR TABELA CORRETA
-- O c√≥digo TypeScript consulta 'categories' (ingl√™s)
-- Mas a constraint de foreign key aponta para 'categorias' (portugu√™s)

-- ‚ö†Ô∏è ANTES DE EXECUTAR: Rode o diagnosticar-tabelas-categorias.sql para ver qual tabela √© usada

-- OP√á√ÉO 1: Se a constraint aponta para CATEGORIAS (portugu√™s)
-- Precisamos copiar dados de categories para categorias e corrigir o c√≥digo

-- 1. Verificar qual tabela tem dados
SELECT COUNT(*) as total_em_categories FROM categories;
SELECT COUNT(*) as total_em_categorias FROM categorias;

-- 2. Se categories tem dados e categorias n√£o, copiar para categorias
INSERT INTO categorias (id, nome, descricao, empresa_id, criado_em, atualizado_em)
SELECT id, name as nome, description as descricao, empresa_id, created_at as criado_em, updated_at as atualizado_em
FROM categories
WHERE id NOT IN (SELECT id FROM categorias);

-- 3. Verificar se a categoria problem√°tica agora existe em categorias
SELECT * FROM categorias WHERE id = 'ba8e7253-6b02-4a1c-b3c8-77ff78618514';

-- ===================================================================
-- OP√á√ÉO 2: Se a constraint aponta para CATEGORIES (ingl√™s)
-- Precisamos usar categories em vez de categorias

-- Ver qual √© a constraint exata
SELECT 
  constraint_name,
  table_name,
  column_name,
  foreign_table_name,
  foreign_column_name
FROM information_schema.referential_constraints
WHERE table_name = 'produtos' AND column_name LIKE '%categoria%';

-- ===================================================================
-- SOLU√á√ÉO DEFINITIVA: Usar a tabela correta em useProducts.ts
-- Se usar 'categorias' (portugu√™s): trocar .from('categories') por .from('categorias')
-- Se usar 'categories' (ingl√™s): garantir que todos os dados est√£o em 'categories'
