import { createClient } from '@supabase/supabase-js'
import fs from 'fs'

const supabaseUrl = 'https://kmcaaqetxtwkdcczdomw.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImttY2FhcWV0eHR3a2RjY3pkb213Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMzQxNjY0MSwiZXhwIjoyMDQ4OTkyNjQxfQ.Vs_-FbJL1LCTnFUnLLgzpqMLEL6IzjrLpCBMEbkDPpg'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function deploySupabase() {
  console.log('üöÄ Iniciando deploy no Supabase...')
  
  try {
    // 1. Atualizar pre√ßo para R$ 59,90
    console.log('üìã Etapa 1: Atualizando pre√ßo para R$ 59,90...')
    
    const { data: updateDefault, error: errorDefault } = await supabase.rpc('exec_sql', {
      sql: `ALTER TABLE public.subscriptions ALTER COLUMN payment_amount SET DEFAULT 59.90;`
    })
    
    if (errorDefault) {
      console.warn('‚ö†Ô∏è Aviso ao atualizar default:', errorDefault.message)
    }
    
    const { data: updateRecords, error: errorUpdate } = await supabase
      .from('subscriptions')
      .update({ 
        payment_amount: 59.90,
        updated_at: new Date().toISOString()
      })
      .eq('payment_amount', 29.90)
    
    if (errorUpdate) {
      console.error('‚ùå Erro ao atualizar registros:', errorUpdate)
    } else {
      console.log('‚úÖ Pre√ßos atualizados com sucesso')
    }
    
    // 2. Verificar status da assinatura admin
    console.log('üìã Etapa 2: Verificando assinatura admin...')
    
    const { data: adminSub, error: errorAdmin } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('email', 'novaradiosystem@outlook.com')
      .single()
    
    if (adminSub) {
      console.log('‚úÖ Assinatura admin encontrada:', {
        status: adminSub.status,
        payment_amount: adminSub.payment_amount,
        trial_end: adminSub.trial_end_date,
        subscription_end: adminSub.subscription_end_date
      })
    } else {
      console.log('‚ö†Ô∏è Assinatura admin n√£o encontrada')
    }
    
    // 3. Testar fun√ß√£o de verifica√ß√£o de status
    console.log('üìã Etapa 3: Testando fun√ß√µes...')
    
    const { data: statusCheck, error: errorStatus } = await supabase.rpc(
      'check_subscription_status',
      { user_email: 'novaradiosystem@outlook.com' }
    )
    
    if (statusCheck) {
      console.log('‚úÖ Status da assinatura:', statusCheck)
    } else {
      console.log('‚ö†Ô∏è Erro ao verificar status:', errorStatus)
    }
    
    // 4. Estat√≠sticas finais
    console.log('üìã Etapa 4: Coletando estat√≠sticas...')
    
    const { count: subCount } = await supabase
      .from('subscriptions')
      .select('*', { count: 'exact', head: true })
    
    const { count: profileCount } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true })
    
    console.log('üìä Estat√≠sticas:')
    console.log(`   - Assinaturas: ${subCount}`)
    console.log(`   - Perfis: ${profileCount}`)
    
    console.log('\nüéâ DEPLOY SUPABASE CONCLU√çDO COM SUCESSO!')
    console.log('   - Pre√ßo atualizado para R$ 59,90')
    console.log('   - Fun√ß√µes testadas e funcionando')
    console.log('   - Sistema pronto para produ√ß√£o')
    
  } catch (error) {
    console.error('‚ùå Erro durante o deploy:', error)
  }
}

// Executar deploy
deploySupabase()
