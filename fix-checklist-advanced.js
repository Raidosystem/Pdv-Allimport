import { createClient } from '@supabase/supabase-js'
import 'dotenv/config'

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function fixChecklistColumn() {
  try {
    console.log('üîç Verificando estrutura da tabela ordens_servico...')
    
    // Primeiro, vamos tentar fazer uma query simples para ver se a tabela existe
    const { data: tables, error: tableError } = await supabase
      .from('ordens_servico')
      .select('*')
      .limit(1)
    
    if (tableError) {
      console.error('‚ùå Erro ao acessar tabela ordens_servico:', tableError.message)
      return false
    }
    
    console.log('‚úÖ Tabela ordens_servico acess√≠vel')
    
    // Agora vamos tentar acessar especificamente a coluna checklist
    console.log('üîç Testando acesso √† coluna checklist...')
    
    const { data: checklistTest, error: checklistError } = await supabase
      .from('ordens_servico')
      .select('id, checklist')
      .limit(1)
    
    if (checklistError) {
      console.error('‚ùå Erro ao acessar coluna checklist:', checklistError.message)
      
      if (checklistError.message.includes("column") && checklistError.message.includes("checklist")) {
        console.log('üí° A coluna checklist n√£o existe. Tentando criar...')
        
        // Tentar executar o SQL para criar a coluna
        const { data: sqlResult, error: sqlError } = await supabase.rpc('exec_sql', {
          sql: `
            DO $$
            BEGIN
                IF NOT EXISTS (
                    SELECT 1 
                    FROM information_schema.columns 
                    WHERE table_name = 'ordens_servico' 
                    AND column_name = 'checklist'
                    AND table_schema = 'public'
                ) THEN
                    ALTER TABLE public.ordens_servico 
                    ADD COLUMN checklist JSONB DEFAULT '{}';
                    
                    COMMENT ON COLUMN public.ordens_servico.checklist IS 'Checklist items for the service order stored as JSON';
                    
                    RAISE NOTICE 'Column checklist added to ordens_servico table';
                ELSE
                    RAISE NOTICE 'Column checklist already exists in ordens_servico table';
                END IF;
            END $$;
          `
        })
        
        if (sqlError) {
          console.error('‚ùå Erro ao executar SQL para criar coluna:', sqlError.message)
          console.log('\nüìã INSTRU√á√ïES MANUAIS:')
          console.log('1. Acesse https://supabase.com/dashboard/project/kmcaaqetxtwkdcczdomw')
          console.log('2. V√° para SQL Editor')
          console.log('3. Execute o seguinte comando:')
          console.log('\nALTER TABLE public.ordens_servico ADD COLUMN IF NOT EXISTS checklist JSONB DEFAULT \'{}\';')
          return false
        }
        
        console.log('‚úÖ SQL executado com sucesso')
        
        // Testar novamente
        const { data: retestData, error: retestError } = await supabase
          .from('ordens_servico')
          .select('id, checklist')
          .limit(1)
        
        if (retestError) {
          console.error('‚ùå Ainda h√° erro ap√≥s tentativa de cria√ß√£o:', retestError.message)
          return false
        }
        
        console.log('‚úÖ Coluna checklist criada e funcionando!')
      }
      
      return false
    }
    
    console.log('‚úÖ Coluna checklist existe e √© acess√≠vel!')
    console.log('üìä Dados de teste:', checklistTest)
    
    // Teste de inser√ß√£o para garantir que funciona
    console.log('üß™ Testando inser√ß√£o com checklist...')
    
    const { data: insertData, error: insertError } = await supabase
      .from('ordens_servico')
      .insert({
        tipo: 'Celular',
        marca: 'TESTE',
        modelo: 'Equipamento de verifica√ß√£o',
        defeito_relatado: 'TESTE - Verifica√ß√£o da coluna checklist',
        status: 'Em an√°lise',
        checklist: { 
          verificacao_concluida: true,
          timestamp: new Date().toISOString()
        }
      })
      .select()
    
    if (insertError) {
      console.error('‚ùå Erro ao inserir OS de teste:', insertError.message)
      return false
    }
    
    console.log('‚úÖ Inser√ß√£o com checklist funcionou!')
    console.log('üìã OS de teste criada:', insertData[0])
    
    // Limpar o teste
    if (insertData && insertData[0]) {
      const { error: deleteError } = await supabase
        .from('ordens_servico')
        .delete()
        .eq('id', insertData[0].id)
      
      if (!deleteError) {
        console.log('üßπ OS de teste removida com sucesso')
      }
    }
    
    return true
    
  } catch (err) {
    console.error('‚ùå Erro geral:', err.message)
    return false
  }
}

fixChecklistColumn()
  .then(success => {
    if (success) {
      console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!')
      console.log('‚úÖ A coluna checklist est√° funcionando corretamente')
      console.log('‚úÖ Agora voc√™ pode criar ordens de servi√ßo normalmente')
    } else {
      console.log('\n‚ùå TESTE FALHOU - A√ß√£o manual necess√°ria')
      console.log('üìã Siga as instru√ß√µes manuais mostradas acima')
    }
    process.exit(success ? 0 : 1)
  })
  .catch(err => {
    console.error('‚ùå Erro cr√≠tico:', err)
    process.exit(1)
  })
