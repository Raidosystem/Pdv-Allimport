const supabaseUrl = 'https://kmcaaqetxtwkdcczdomw.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImttY2FhcWV0eHR3a2RjY3pkb213Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MjU3MDksImV4cCI6MjA2OTUwMTcwOX0.gFcUOoNPESqp2PALV5CYhMceTQ4HVuf-noGn94Fzbwg';

async function limparOrdensServico() {
  console.log('üîß VERIFICANDO E LIMPANDO ORDENS DE SERVI√áO...\n');
  
  try {
    // Verificar se h√° ordens de servi√ßo
    console.log('üìã Verificando ordens de servi√ßo...');
    const osRes = await fetch(`${supabaseUrl}/rest/v1/ordens_servico?select=*`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });
    
    if (!osRes.ok) {
      const error = await osRes.json();
      console.log('‚ùå Erro ao verificar ordens de servi√ßo:', error.message);
      return;
    }
    
    const ordens = await osRes.json();
    
    if (Array.isArray(ordens) && ordens.length > 0) {
      console.log(`‚ö†Ô∏è  ENCONTRADAS ${ordens.length} ORDENS DE SERVI√áO:`);
      
      ordens.forEach((ordem, index) => {
        console.log(`${index + 1}. ${ordem.cliente_nome || 'Cliente n√£o informado'}`);
        console.log(`   üìû ${ordem.telefone || 'Telefone n√£o informado'}`);
        console.log(`   üì± ${ordem.equipamento || 'Equipamento n√£o informado'}`);
        console.log(`   üîß ${ordem.defeito || 'Defeito n√£o informado'}`);
        console.log(`   üìä Status: ${ordem.status || 'N√£o informado'}`);
        console.log(`   üí∞ Valor: R$ ${ordem.valor_orcamento || '0,00'}`);
        console.log(`   üìÖ Data: ${ordem.data_entrada ? new Date(ordem.data_entrada).toLocaleDateString('pt-BR') : 'N√£o informada'}`);
        console.log('');
      });
      
      // Limpar as ordens de servi√ßo
      console.log('üóëÔ∏è  LIMPANDO ORDENS DE SERVI√áO...');
      const deleteRes = await fetch(`${supabaseUrl}/rest/v1/ordens_servico`, {
        method: 'DELETE',
        headers: {
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({}) // Sem filtros = deletar todas (cuidado!)
      });
      
      if (deleteRes.ok) {
        console.log('‚úÖ TODAS AS ORDENS DE SERVI√áO FORAM REMOVIDAS!');
      } else {
        const deleteError = await deleteRes.json();
        console.log('‚ùå Erro ao limpar ordens de servi√ßo:', deleteError.message);
        
        // Tentar deletar uma por uma
        console.log('üîÑ Tentando deletar uma por uma...');
        for (const ordem of ordens) {
          try {
            const individualDeleteRes = await fetch(`${supabaseUrl}/rest/v1/ordens_servico?id=eq.${ordem.id}`, {
              method: 'DELETE',
              headers: {
                'apikey': supabaseKey,
                'Authorization': `Bearer ${supabaseKey}`
              }
            });
            
            if (individualDeleteRes.ok) {
              console.log(`‚úÖ OS ${ordem.id} removida`);
            } else {
              console.log(`‚ùå Erro ao remover OS ${ordem.id}`);
            }
          } catch (err) {
            console.log(`‚ùå Erro ao remover OS ${ordem.id}:`, err.message);
          }
        }
      }
      
      // Verificar novamente
      console.log('\nüîç VERIFICA√á√ÉO FINAL...');
      const finalRes = await fetch(`${supabaseUrl}/rest/v1/ordens_servico?select=count`, {
        headers: {
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`,
          'Prefer': 'count=exact'
        }
      });
      
      if (finalRes.ok) {
        const count = finalRes.headers.get('content-range');
        const totalOrdens = count ? count.split('/')[1] : '0';
        console.log(`üìä Total de ordens restantes: ${totalOrdens}`);
        
        if (totalOrdens === '0') {
          console.log('üéâ SISTEMA COMPLETAMENTE LIMPO!');
          console.log('‚úÖ Pronto para dados reais');
        } else {
          console.log(`‚ö†Ô∏è  Ainda restam ${totalOrdens} ordens no sistema`);
        }
      }
      
    } else {
      console.log('‚úÖ NENHUMA ORDEM DE SERVI√áO ENCONTRADA');
      console.log('Sistema j√° est√° limpo!');
    }
    
    // Verificar tamb√©m clientes relacionados
    console.log('\nüë§ VERIFICANDO CLIENTES...');
    const clientesRes = await fetch(`${supabaseUrl}/rest/v1/clientes?select=*`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });
    
    if (clientesRes.ok) {
      const clientes = await clientesRes.json();
      if (Array.isArray(clientes) && clientes.length > 0) {
        console.log(`‚ö†Ô∏è  ENCONTRADOS ${clientes.length} CLIENTES:`);
        clientes.forEach((cliente, index) => {
          console.log(`${index + 1}. ${cliente.nome} - ${cliente.telefone || 'Sem telefone'}`);
        });
      } else {
        console.log('‚úÖ Nenhum cliente encontrado');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

limparOrdensServico();
