// Debug direto no browser para identificar o problema
console.log('üîç DEBUG SUPABASE - Iniciando diagn√≥stico...')

// 1. Verificar se as vari√°veis est√£o corretas
console.log('1Ô∏è‚É£ Verificando configura√ß√£o:')
console.log('VITE_SUPABASE_URL:', import.meta.env?.VITE_SUPABASE_URL || 'UNDEFINED')
console.log('VITE_SUPABASE_ANON_KEY:', import.meta.env?.VITE_SUPABASE_ANON_KEY ? 'Presente' : 'AUSENTE')
console.log('ENV completo:', import.meta.env)

// 2. Verificar se Supabase est√° carregado
import { supabase } from './lib/supabase'
console.log('2Ô∏è‚É£ Cliente Supabase:', supabase ? 'Criado' : 'Erro')

// Log das configura√ß√µes internas do Supabase
console.log('3Ô∏è‚É£ Config interna Supabase:', {
  supabaseUrl: supabase.supabaseUrl,
  supabaseKey: supabase.supabaseKey?.substring(0, 20) + '...',
  hasKey: !!supabase.supabaseKey
})

// 4. Testar conex√£o b√°sica
async function debugAuth() {
  try {
    console.log('4Ô∏è‚É£ Testando autentica√ß√£o...')
    
    // Teste de login com o email principal correto
    console.log('Tentando login com novaradiosystem@outlook.com...')
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'novaradiosystem@outlook.com',
      password: 'admin123'
    })
    
    if (error) {
      console.log('‚ùå Erro de login:', {
        message: error.message,
        status: error.status,
        name: error.name,
        stack: error.stack
      })
    } else {
      console.log('‚úÖ Login bem-sucedido:', data.user?.email)
    }
    
  } catch (err) {
    console.log('üí• Erro geral:', err)
  }
}

// Executar teste depois de um delay
setTimeout(debugAuth, 2000)

export { debugAuth }
