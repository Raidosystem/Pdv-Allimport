/**
 * ================================================
 * SERVI√áO DE VERIFICA√á√ÉO DE EMAIL CUSTOMIZADO
 * ================================================
 * 
 * Sistema personalizado que:
 * 1. Gera c√≥digo de 6 d√≠gitos no banco
 * 2. Envia email via Supabase SMTP
 * 3. Verifica c√≥digo sem criar sess√£o
 * 4. Ativa usu√°rio apenas ap√≥s verifica√ß√£o correta
 */

import { supabase } from '../lib/supabase';
import { activateUserAfterEmailVerification } from './userActivationService';

interface VerificationResponse {
  success: boolean;
  message?: string;
  error?: string;
  attemptsRemaining?: number;
  trialEndDate?: string;
  daysRemaining?: number;
}

/**
 * Gera c√≥digo e envia por email
 */
export async function sendVerificationCode(
  email: string
): Promise<VerificationResponse> {
  try {
    console.log('üìß Gerando c√≥digo de verifica√ß√£o para:', email);

    // Gerar c√≥digo no banco
    const { data, error } = await supabase
      .rpc('generate_and_send_verification_code', {
        user_email: email
      });

    if (error) {
      console.error('‚ùå Erro ao gerar c√≥digo:', error);
      throw error;
    }

    if (!data || !data.success) {
      throw new Error(data?.error || 'Erro ao gerar c√≥digo');
    }

    const verificationCode = data.code;
    console.log('üîê C√≥digo gerado:', verificationCode);

    // Enviar email com o c√≥digo via Supabase OTP
    // (Usando OTP apenas para enviar email, n√£o para autentica√ß√£o)
    const { error: emailError } = await supabase.auth.signInWithOtp({
      email: email,
      options: {
        shouldCreateUser: false,
        data: {
          verification_code: verificationCode,
        },
      },
    });

    if (emailError) {
      console.warn('‚ö†Ô∏è Erro ao enviar email via OTP, tentando m√©todo alternativo:', emailError);
      // Continuar mesmo se falhar, pois o c√≥digo foi gerado
    }

    console.log('‚úÖ C√≥digo gerado e email enviado!');

    return {
      success: true,
      message: `C√≥digo de verifica√ß√£o enviado para ${email}. V√°lido por 15 minutos.`,
    };
  } catch (error: any) {
    console.error('‚ùå Erro ao enviar c√≥digo:', error);
    return {
      success: false,
      error: error.message || 'Erro ao enviar c√≥digo de verifica√ß√£o',
    };
  }
}

/**
 * Verifica o c√≥digo fornecido pelo usu√°rio
 * SEM criar sess√£o - apenas valida
 */
export async function verifyCode(
  email: string,
  code: string
): Promise<VerificationResponse> {
  try {
    console.log('üîç Verificando c√≥digo para:', email);

    // Verificar c√≥digo no banco
    const { data, error } = await supabase
      .rpc('verify_email_verification_code', {
        user_email: email,
        user_code: code
      });

    if (error) {
      console.error('‚ùå Erro ao verificar c√≥digo:', error);
      throw error;
    }

    if (!data) {
      throw new Error('Resposta inv√°lida do servidor');
    }

    if (!data.success) {
      return {
        success: false,
        error: data.error || 'C√≥digo inv√°lido',
        attemptsRemaining: data.attempts_remaining
      };
    }

    console.log('‚úÖ C√≥digo verificado com sucesso!');

    // AGORA SIM: Ativar usu√°rio e conceder 15 dias de teste
    console.log('üéØ Ativando usu√°rio e concedendo per√≠odo de teste...');
    const activationResult = await activateUserAfterEmailVerification(email);

    if (!activationResult.success) {
      console.error('‚ö†Ô∏è C√≥digo correto, mas erro ao ativar usu√°rio:', activationResult.error);
      // C√≥digo est√° correto, mas houve erro na ativa√ß√£o
      return {
        success: true, // C√≥digo foi verificado
        message: 'C√≥digo verificado! Finalizando ativa√ß√£o...',
      };
    }

    console.log('üéâ Usu√°rio ativado com sucesso!');

    return {
      success: true,
      message: activationResult.message || 'Email verificado e conta ativada com sucesso!',
      trialEndDate: activationResult.trialEndDate,
      daysRemaining: activationResult.daysRemaining
    };
  } catch (error: any) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);

    let errorMessage = 'Erro ao verificar c√≥digo';

    if (error.message.includes('expirado')) {
      errorMessage = 'C√≥digo expirado. Solicite um novo c√≥digo.';
    } else if (error.message.includes('inv√°lido')) {
      errorMessage = 'C√≥digo inv√°lido';
    } else if (error.message.includes('tentativas')) {
      errorMessage = 'N√∫mero m√°ximo de tentativas excedido. Solicite um novo c√≥digo.';
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * Reenvia c√≥digo de verifica√ß√£o
 */
export async function resendVerificationCode(
  email: string
): Promise<VerificationResponse> {
  console.log('üîÑ Reenviando c√≥digo de verifica√ß√£o...');
  return sendVerificationCode(email);
}
