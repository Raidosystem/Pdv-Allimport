/**
 * ================================================
 * SERVI√áO DE VERIFICA√á√ÉO - SUPABASE OTP
 * ================================================
 * 
 * Sistema de verifica√ß√£o usando Supabase Auth OTP:
 * - C√≥digo enviado automaticamente por email via SMTP configurado
 * - Verifica√ß√£o nativa do Supabase
 * - Sem c√≥digo exposto na interface
 */

import { supabase } from '../lib/supabase';

interface EmailVerificationResponse {
  success: boolean;
  error?: string;
}

/**
 * Envia c√≥digo de verifica√ß√£o via Supabase OTP
 * O c√≥digo ser√° enviado automaticamente por email
 */
export async function sendEmailVerificationCode(
  email: string
): Promise<EmailVerificationResponse> {
  try {
    console.log('üìß Enviando c√≥digo via Supabase OTP para:', email);

    // Usar Supabase OTP - envia email automaticamente
    const { error } = await supabase.auth.signInWithOtp({
      email: email,
      options: {
        shouldCreateUser: false, // N√£o criar usu√°rio, apenas enviar c√≥digo
      },
    });

    if (error) {
      console.error('‚ùå Erro ao enviar c√≥digo:', error);
      throw error;
    }

    console.log('‚úÖ C√≥digo enviado com sucesso! Verifique seu email.');
    
    return {
      success: true,
    };
  } catch (error: any) {
    console.error('‚ùå Erro ao enviar c√≥digo:', error);
    return {
      success: false,
      error: error.message || 'Erro ao enviar c√≥digo de verifica√ß√£o',
    };
  }
}

/**
 * Verifica o c√≥digo OTP enviado por email
 */
export async function verifyEmailCode(
  email: string,
  code: string
): Promise<EmailVerificationResponse> {
  try {
    console.log('üîç Verificando c√≥digo para:', email);

    // Verificar OTP com Supabase
    const { data, error } = await supabase.auth.verifyOtp({
      email: email,
      token: code,
      type: 'email',
    });

    if (error) {
      console.error('‚ùå Erro ao verificar c√≥digo:', error);
      throw error;
    }

    if (!data.session) {
      return {
        success: false,
        error: 'C√≥digo inv√°lido',
      };
    }

    console.log('‚úÖ C√≥digo verificado com sucesso!');

    return {
      success: true,
    };
  } catch (error: any) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);

    // Mensagens de erro amig√°veis
    let errorMessage = 'Erro ao verificar c√≥digo';

    if (error.message.includes('expired')) {
      errorMessage = 'C√≥digo expirado. Solicite um novo c√≥digo.';
    } else if (error.message.includes('invalid')) {
      errorMessage = 'C√≥digo inv√°lido';
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * Reenviar c√≥digo de verifica√ß√£o
 * IMPORTANTE: N√£o retorna o c√≥digo, apenas confirma o envio
 */
export async function resendEmailVerificationCode(
  email: string
): Promise<EmailVerificationResponse> {
  console.log('üîÑ Reenviando c√≥digo de verifica√ß√£o...');
  return sendEmailVerificationCode(email);
}
