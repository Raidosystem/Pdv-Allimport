import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://kmcaaqetxtwkdcczdomw.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImttY2FhcWV0eHR3a2RjY3pkb213Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MjU3MDksImV4cCI6MjA2OTUwMTcwOX0.gFcUOoNPESqp2PALV5CYhMceTQ4HVuf-noGn94Fzbwg'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testAlternativeEmails() {
  console.log('üß™ TESTE COM EMAILS ALTERNATIVOS')
  console.log('=================================')
  console.log('')

  // Lista de emails de teste para verificar se o problema √© espec√≠fico do Gmail
  const testEmails = [
    'teste.pdv@outlook.com',
    'pdv.teste@yahoo.com', 
    'allimport.test@hotmail.com'
  ]

  for (const email of testEmails) {
    console.log(`üìß Testando: ${email}`)
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: email,
        password: 'TestePDV2025!',
        options: {
          emailRedirectTo: 'https://pdv-allimport.vercel.app/confirm-email',
          data: {
            name: 'Teste PDV',
            provider: email.split('@')[1]
          }
        }
      })

      if (error) {
        if (error.message.includes('already registered')) {
          console.log(`   ‚úÖ Email j√° registrado - tentando reenvio...`)
          
          const { error: resendError } = await supabase.auth.resend({
            type: 'signup',
            email: email,
            options: {
              emailRedirectTo: 'https://pdv-allimport.vercel.app/confirm-email'
            }
          })
          
          if (resendError) {
            console.log(`   ‚ùå Falha no reenvio: ${resendError.message}`)
          } else {
            console.log(`   ‚úÖ Reenvio realizado com sucesso!`)
          }
        } else {
          console.log(`   ‚ùå Erro: ${error.message}`)
        }
      } else {
        console.log(`   ‚úÖ Usu√°rio criado - ID: ${data.user?.id?.substring(0, 8)}...`)
        console.log(`   üì¨ Email de confirma√ß√£o enviado!`)
      }
      
    } catch (err) {
      console.log(`   ‚ùå Erro inesperado: ${err.message}`)
    }
    
    console.log('')
    // Pausa entre testes
    await new Promise(resolve => setTimeout(resolve, 1500))
  }

  console.log('üéØ TESTE ESPEC√çFICO GMAIL:')
  console.log('O problema pode ser espec√≠fico do Gmail. Poss√≠veis causas:')
  console.log('‚Ä¢ Gmail est√° classificando emails do Supabase como spam')
  console.log('‚Ä¢ Filtros de seguran√ßa do Gmail muito restritivos')
  console.log('‚Ä¢ Problema de reputa√ß√£o do dom√≠nio do Supabase')
  console.log('‚Ä¢ Rate limiting por muitas tentativas')
  console.log('')
  
  console.log('üí° SOLU√á√ïES RECOMENDADAS:')
  console.log('1. Aguarde 15-30 minutos e verifique novamente')
  console.log('2. Adicione noreply@supabase.io √† lista de contatos')
  console.log('3. Verifique as configura√ß√µes de filtro do Gmail')
  console.log('4. Use email alternativo temporariamente')
  console.log('5. Configure SMTP personalizado no Supabase')
}

// Executar teste
testAlternativeEmails()
