// Teste r√°pido no console - Cole isto para testar se as mudan√ßas est√£o ativas
console.log('üß™ TESTE R√ÅPIDO - VERIFICANDO MUDAN√áAS');

// 1. Verificar se o hook tem os novos logs
if (window.React && window.React.version) {
  console.log('‚úÖ React ativo:', window.React.version);
} else {
  console.log('‚ö†Ô∏è React n√£o detectado no window');
}

// 2. Testar a query que deve funcionar
if (window.supabase) {
  console.log('üîç Testando query do ProductService (que funciona):');
  window.supabase
    .from('produtos')
    .select('*')
    .eq('ativo', true)
    .order('nome')
    .limit(5)
    .then(({ data, error, count }) => {
      if (error) {
        console.error('‚ùå Erro na query do ProductService:', error.message);
        console.error('üîß Detalhes do erro:', error);
      } else {
        console.log(`‚úÖ Query do ProductService OK: ${data?.length || 0} produtos`);
        if (data && data.length > 0) {
          console.log('üìã Primeiros produtos:', data.slice(0, 2).map(p => ({
            nome: p.nome,
            ativo: p.ativo,
            user_id: p.user_id?.slice(0, 8) + '...'
          })));
        }
      }
    });

  console.log('üîç Testando query antiga do useProdutos (que falha):');
  window.supabase
    .from('produtos')
    .select('*')
    .eq('ativo', true)
    .order('criado_em', { ascending: false })
    .limit(5)
    .then(({ data, error }) => {
      if (error) {
        console.error('‚ùå PROBLEMA ENCONTRADO - Query antiga falha:', error.message);
        console.error('üîß C√≥digo do erro:', error.code);
        console.error('üîß Este √© o motivo dos 0 produtos!');
      } else {
        console.log('‚ö†Ô∏è Query antiga funcionou, problema √© outro');
      }
    });
}

console.log('üìã INTERPRETA√á√ÉO:');
console.log('- Se ProductService OK mas useProdutos falha = cache n√£o atualizado');
console.log('- Se ambos falham = problema de RLS/Auth');
console.log('- Se ambos funcionam = problema no React/Hook');